#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#~~~~~~~~~~~~~~IMPORTS~~~~~~~~~~~~~~#
# Standard library imports
import argparse
import sys
import os

# Local imports
from ont2cram.converter import converter
from ont2cram.reverse_converter import reverse_converter
from ont2cram.test import test
import ont2cram as package

def main(args=None):
    """Main command line parser"""

    # Head parser
    parser = argparse.ArgumentParser(description=package.__description__)
    parser.add_argument("--version", action="version", version="{} v{}".format(package.__name__ , package.__version__))
    subparsers = parser.add_subparsers(help="{} implements the following subcommands", dest="sub-command".format(package.__name__))
    subparsers.required = True

    parser_conv = subparsers.add_parser("converter", description="Fast5 to CRAM conversion utility")
    parser_conv.set_defaults(func=converter)
    parser_conv.add_argument("-i","--input_dir", required=True, type=str, help="Input directory containing Fast5 files (required)")
    parser_conv.add_argument("-o","--output_file", type=str, default="out.cram", help="Output CRAM filename (default: %(default)s)")
    parser_conv.add_argument("-f","--fastq_dir", default=None, type=str, help="Input directory containing FASTQ files (default: %(default)s)")
    # parser_conv.add_argument("-a","--alignment_dir", default=None, type=str, help="Input directory containing FASTQ files (default: %(default)s)")
    parser_conv.add_argument("-m","--missing_fastq", default="error", choices=["ignore","skip","error"], help="Behavior when a read id has no corresponding basecalled fastq (default: %(default)s)")
    parser_conv.add_argument("-s","--skip_signal", action="store_true", default=False, help="Skips the raw signal data (default: %(default)s)")
    # parser_conv.add_argument("-e","--include_events", action="store_true", default=False, help="Include the event table data for basecalled fastq (default: %(default)s)")
    # parser_conv.add_argument("-a","--include_fastq", action="store_true", default=False, help="Include the fastq data for basecalled fastq (default: %(default)s)")

    parser_rconv = subparsers.add_parser("reverse_converter", description="CRAM to Fast5 conversion utility (Reverse converterer allowing to restore original Fast5 collection from Cram generated by ont2cram)")
    parser_rconv.set_defaults(func=reverse_converter)
    parser_rconv.add_argument("-i","--input_file", type=str, required=True, help="Input CRAM filename (required)")
    parser_rconv.add_argument("-o","--output_dir", type=str, default=os.getcwd(), help="Output directory for generated Fast5 files (default:'current directory')")
    # parser_rconv.add_argument("-t","--output_type", default="fast5", choices=["fastq","fast5","basecalled_fast5"], help="Dump either fastq, fast5 or basecalled_fast5 (default: %(default)s)")
    # parser_rconv.add_argument("--n_reads_fast5", type=int, default=4000, help="Number of reads per fast5 files (default: %(default)s)")
    # parser_rconv.add_argument("--n_reads_fastq", type=int, default=0, help=" Number of reads per fast5 files (default: %(default)s)")

    parser_test = subparsers.add_parser("test", description="Fast5 to CRAM testing tool")
    parser_test.set_defaults(func=test)
    parser_test.add_argument("-k","--keep_tmp", action="store_true", default=False, help="Do not delete tmp folders and files on exit (default: %(default)s)")

    # Add common group parsers
    for p in [parser_conv, parser_rconv]:
        p_vb = p.add_argument_group("Verbosity")
        p_vb.add_argument("-v", "--verbose", action="store_true", default=False, help="Increase verbosity (default: %(default)s)")
        p_vb.add_argument("-q", "--quiet", action="store_true", default=False, help="Reduce verbosity (default: %(default)s)")
        p_vb.add_argument("-p", "--progress", action="store_true", default=False, help="Display a progress bar (default: %(default)s)")

    # Parse args and call subfunction
    args = parser.parse_args()
    args.func(**vars(args))
